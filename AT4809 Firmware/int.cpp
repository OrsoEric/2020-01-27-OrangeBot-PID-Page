/****************************************************************************
**	INCLUDE
****************************************************************************/

//type definition using the bit width and signedness
#include <stdint.h>
//define the ISR routune, ISR vector, and the sei() cli() function
#include <avr/interrupt.h>
//name all the register and bit
#include <avr/io.h>

//General purpose macros
#include "at_utils.h"
//AT4809 PORT macros definitions
#include "at4809_port.h"

#include "global.h"

/****************************************************************************
**GLOBAL VARS
****************************************************************************/

/****************************************************************************
** INTERRUPT SERVICE ROUTINE
*****************************************************************************
**	In the AT4809 ISR flags have to be cleared manually
****************************************************************************/

/****************************************************************************
**	RTC Periodic Interrupt
*****************************************************************************
**	Periodic interrupt generated by the RTC from it's independent clock source
****************************************************************************/

ISR( RTC_PIT_vect )
{	
	//----------------------------------------------------------------
	//	VARS
	//----------------------------------------------------------------

	//----------------------------------------------------------------
	//	INIT
	//----------------------------------------------------------------
	
	//----------------------------------------------------------------
	//	BODY
	//----------------------------------------------------------------	
	
	//Set the System Tick
	g_isr_flags.system_tick = true;
	
	//----------------------------------------------------------------
	//	RETURN
	//----------------------------------------------------------------
	
	//Manually clear the interrupt flag
	RTC.PITINTFLAGS = RTC_PI_bm;
}

/****************************************************************************
**	USART3 RX Interrupt
*****************************************************************************
**	
****************************************************************************/

ISR( USART3_RXC_vect )
{
	//----------------------------------------------------------------
	//	VARS
	//----------------------------------------------------------------
	
	//Temp var
	uint8_t rx_data_tmp;
	
	//----------------------------------------------------------------
	//	INIT
	//----------------------------------------------------------------
	
	//----------------------------------------------------------------
	//	BODY
	//----------------------------------------------------------------
	
	//Fetch the data and clear the interrupt flag
	rx_data_tmp = USART3.RXDATAL;
	//Push byte into RS485 buffer for processing
	AT_BUF_PUSH_SAFER( rpi_rx_buf, rx_data_tmp );
	
	//----------------------------------------------------------------
	//	RETURN
	//----------------------------------------------------------------	
	
}

/****************************************************************************
**  ISR
**  PORTC_PORT_vect
****************************************************************************/
//! @brief 
//! @details
//! Any edge on any pin in PORTC will trigger this interrupt
//! Call the quad channel encoder decoder routine
//! Do it as call because the routine can be called from elsewhere
/***************************************************************************/

ISR( PORTC_PORT_vect )
{
	//----------------------------------------------------------------
	//	BODY
	//----------------------------------------------------------------
	
	//quad channel encoder decoder routine
	quad_encoder_decoder( PORTC.IN );
	
	//----------------------------------------------------------------
	//	RETURN
	//----------------------------------------------------------------
	
	//Clear the Interrupt Flags of PORTC
	PORTC.INTFLAGS = (uint8_t)0xff;
} //End ISR: PORTC_PORT_vect
